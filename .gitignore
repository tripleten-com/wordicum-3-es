# Archivos compilados por bytes / optimizados / DLL
__pycache__/
*.py[cod]
*$py.class

# Extensiones C
*.so

# Distribución / empaquetado
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
# Normalmente estos archivos se escriben con un script de Python con base en una plantilla
# antes de que el PyInstaller cree un archivo exe para añadirle la fecha u otra información.
*.manifest
*.spec

# Registros del instalador
pip-log.txt
pip-delete-this-directory.txt

# Pruebas unitarias / informes de cobertura
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Traducciones
*.mo
*.pot

# Cosas de Django:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Cosas de Flask:
instance/
.webassets-cache

# Cosas de Scrapy:
.scrapy

# Documentación de Sphinx
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   Para una librería o paquete, es posible que desees ignorar estos archivos, ya que el código
#   está diseñado para ejecutarse en múltiples entornos; de lo contrario, consúltalos en:
# .python-version

# pipenv
#   De acuerdo con pypa/pipenv#598, se recomienda incluir Pipfile.lock en el control de versiones.
#   Sin embargo, en caso de colaboración, si se tienen dependencias específicas de la plataforma o dependencias
#   que no tienen soporte multiplataforma, es posible que pipenv instale dependencias que no funcionan, o que no
#   instale todas las dependencias necesarias.
#Pipfile.lock

# poetry
#   Al igual que Pipfile.lock, generalmente se recomienda incluir poetry.lock en el control de versiones.
#   Esto se recomienda especialmente para paquetes binarios para garantizar la reproducibilidad y
#   es más comúnmente ignorado para las librerías.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Al igual que Pipfile.lock, generalmente se recomienda incluir pdm.lock en el control de versiones.
# pdm.lock
#   pdm almacena configuraciones de todo el proyecto en .pdm.toml, pero se recomienda no incluirlo
#   en el control de versiones.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; utilizado, por ejemplo, por github.com/David-OConnor/pyflow y github.com/pdm-project/pdm
__pypackages__/

# Cosas de Celery 
celerybeat-schedule
celerybeat.pid

# Archivos analizados por SageMath
*.sage.py

# Entornos
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Configuración del proyecto Spyder
.spyderproject
.spyproject

# Configuración del proyecto Rope
.ropeproject

# documentación de mkdocs
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Comprobador de tipos Pyre
.pyre/

# Comprobador de tipos estáticos pytype
.pytype/

# Símbolos de depuración de Cython
cython_debug/

# PyCharm
# La plantilla específica de JetBrains se mantiene en un JetBrains.gitignore separado que
# se puede encontrar en https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
# y se puede agregar al gitignore global o fusionar en este archivo. Para una opción más nuclear
# (no recomendada), puedes descomentar lo siguiente para ignorar toda la carpeta idea.
.idea/
